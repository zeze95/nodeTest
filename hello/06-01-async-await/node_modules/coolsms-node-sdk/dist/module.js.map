{"mappings":"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","sources":["src/index.ts","src/requests/messageRequest.ts","src/env_config.json","src/lib/stringDateTrasnfer.ts","src/errors/DefaultError.ts","src/lib/defaultFetcher.ts","src/lib/authenticator.ts","src/lib/queryParameterGenerator.ts"],"sourcesContent":["import Message from './models/message';\r\nimport {\r\n    CreateGroupRequest,\r\n    defaultAgent,\r\n    FileType,\r\n    FileUploadRequest,\r\n    GetGroupMessagesRequest,\r\n    GetGroupsRequest,\r\n    GetMessagesRequest,\r\n    GetMessagesRequestType,\r\n    GetStatisticsRequest,\r\n    GetStatisticsRequestType,\r\n    GroupMessageAddRequest,\r\n    MultipleMessageSendingRequest,\r\n    RemoveMessageIdsToGroupRequest,\r\n    RequestConfig,\r\n    ScheduledDateSendingRequest,\r\n    SingleMessageSendingRequest\r\n} from './requests/messageRequest';\r\nimport defaultFetcher from './lib/defaultFetcher';\r\nimport {\r\n    AddMessageResponse,\r\n    FileUploadResponse,\r\n    GetBalanceResponse,\r\n    GetGroupsResponse,\r\n    GetMessagesResponse,\r\n    GetStatisticsResponse,\r\n    GroupMessageResponse,\r\n    RemoveGroupMessagesResponse,\r\n    SingleMessageSentResponse\r\n} from './responses/messageResponses';\r\nimport {GroupId} from './types/commonTypes';\r\nimport queryParameterGenerator from './lib/queryParameterGenerator';\r\nimport {formatISO} from 'date-fns';\r\nimport ImageToBase64 from 'image-to-base64';\r\nimport stringDateTransfer from './lib/stringDateTrasnfer';\r\n\r\ntype AuthInfo = {\r\n    apiKey: string,\r\n    apiSecret: string\r\n}\r\n\r\nexport default class CoolsmsMessageService {\r\n    private readonly baseUrl = 'https://api.coolsms.co.kr';\r\n    private readonly apiKey: string;\r\n    private readonly apiSecret: string;\r\n    private readonly authInfo: AuthInfo;\r\n\r\n    constructor(apiKey: string, apiSecret: string) {\r\n        this.apiKey = apiKey;\r\n        this.apiSecret = apiSecret;\r\n        this.authInfo = {\r\n            apiKey,\r\n            apiSecret\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 단일 메시지 발송 기능\r\n     * @param message 메시지(문자, 알림톡 등)\r\n     * @param appId appstore용 app id\r\n     */\r\n    async sendOne(message: Message, appId?: string): Promise<SingleMessageSentResponse> {\r\n        const parameter = new SingleMessageSendingRequest(message, false, appId);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'POST',\r\n            url: `${this.baseUrl}/messages/v4/send`\r\n        };\r\n        return defaultFetcher<SingleMessageSendingRequest, SingleMessageSentResponse>(this.authInfo, requestConfig, parameter);\r\n    }\r\n\r\n    /**\r\n     * 단일 메시지 예약 발송 기능\r\n     * @param message 메시지(문자, 알림톡 등)\r\n     * @param scheduledDate\r\n     */\r\n    async sendOneFuture(message: Message, scheduledDate: string | Date): Promise<GroupMessageResponse> {\r\n        const groupId = await this.createGroup();\r\n        await this.addMessagesToGroup(groupId, [message]);\r\n        scheduledDate = stringDateTransfer(scheduledDate);\r\n        return this.reserveGroup(groupId, scheduledDate);\r\n    }\r\n\r\n    /**\r\n     * 여러 메시지 즉시 발송 기능\r\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\r\n     * @param messages 여러 메시지(문자, 알림톡 등)\r\n     * @param allowDuplicates 중복 수신번호 허용\r\n     * @param appId appstore용 app id\r\n     */\r\n    async sendMany(messages: Array<Message>, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\r\n        const parameter = new MultipleMessageSendingRequest(messages, allowDuplicates, appId);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'POST',\r\n            url: `${this.baseUrl}/messages/v4/send-many`\r\n        };\r\n        return defaultFetcher<MultipleMessageSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, parameter);\r\n    }\r\n\r\n    /**\r\n     * 여러 메시지 예약 발송 기능\r\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\r\n     * @param messages 여러 메시지(문자, 알림톡 등)\r\n     * @param scheduledDate 예약 발송 일자\r\n     * @param allowDuplicates 중복 수신번호 허용\r\n     * @param appId appstore용 app id\r\n     */\r\n    async sendManyFuture(messages: Array<Message>, scheduledDate: string | Date, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\r\n        const groupId = await this.createGroup(allowDuplicates, appId);\r\n        await this.addMessagesToGroup(groupId, messages);\r\n        scheduledDate = stringDateTransfer(scheduledDate);\r\n        return this.reserveGroup(groupId, scheduledDate);\r\n    }\r\n\r\n    /**\r\n     * 그룹 생성\r\n     */\r\n    async createGroup(allowDuplicates?: boolean, appId?: string): Promise<GroupId> {\r\n        allowDuplicates = allowDuplicates ?? false;\r\n        const {sdkVersion, osPlatform} = defaultAgent;\r\n        const requestConfig: RequestConfig = {\r\n            method: 'POST',\r\n            url: `${this.baseUrl}/messages/v4/groups`\r\n        };\r\n        return defaultFetcher<CreateGroupRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\r\n            sdkVersion,\r\n            osPlatform,\r\n            allowDuplicates,\r\n            appId\r\n        }).then(res => res.groupId);\r\n    }\r\n\r\n    /**\r\n     * 그룹 메시지 추가\r\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\r\n     * @param groupId 생성 된 Group ID\r\n     * @param messages 여러 메시지(문자, 알림톡 등)\r\n     */\r\n    async addMessagesToGroup(groupId: GroupId, messages: Required<Array<Message>>): Promise<AddMessageResponse> {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'PUT',\r\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\r\n        };\r\n        return defaultFetcher<GroupMessageAddRequest, AddMessageResponse>(this.authInfo, requestConfig, new GroupMessageAddRequest(messages));\r\n    }\r\n\r\n    /**\r\n     * 그룹 메시지 전송 요청\r\n     * @param groupId 생성 된 Group ID\r\n     */\r\n    async sendGroup(groupId: GroupId): Promise<GroupMessageResponse> {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'POST',\r\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`\r\n        };\r\n        return defaultFetcher<undefined, GroupMessageResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 그룹 예약 발송 설정\r\n     * @param groupId 생성 된 Group ID\r\n     * @param scheduledDate 예약발송 할 날짜\r\n     */\r\n    async reserveGroup(groupId: GroupId, scheduledDate: Date) {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'POST',\r\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\r\n        };\r\n        const formattedScheduledDate = formatISO(scheduledDate);\r\n        return defaultFetcher<ScheduledDateSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\r\n            scheduledDate: formattedScheduledDate\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 그룹 통계 정보 조회\r\n     * @param data 그룹 정보 상세 조회용 request 데이터, date 관련 파라미터는 iso8601 포맷으로 보내야 함\r\n     */\r\n    async getGroups(data?: GetGroupsRequest) {\r\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups`, data);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'GET',\r\n            url: endpoint\r\n        };\r\n        return defaultFetcher<undefined, GetGroupsResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 그룹 내 메시지 목록 조회\r\n     * @param groupId 생성 된 Group ID\r\n     * @param data startkey, limit 등 쿼리 조건 파라미터\r\n     */\r\n    async getGroupMessages(groupId: GroupId, data?: GetGroupMessagesRequest): Promise<GetMessagesResponse> {\r\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups/${groupId}/messages`, data);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'GET',\r\n            url: endpoint\r\n        };\r\n        return defaultFetcher<undefined, GetMessagesResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 그룹 내 특정 메시지 삭제\r\n     * @param groupId 생성 된 Group Id\r\n     * @param messageIds 생성 된 메시지 ID 목록\r\n     */\r\n    async removeGroupMessages(groupId: GroupId, messageIds: Required<Array<string>>): Promise<RemoveGroupMessagesResponse> {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'DELETE',\r\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\r\n        };\r\n        return defaultFetcher<RemoveMessageIdsToGroupRequest, RemoveGroupMessagesResponse>(this.authInfo, requestConfig, {messageIds});\r\n    }\r\n\r\n    /**\r\n     * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)\r\n     * @param groupId 생성 된 Group ID\r\n     */\r\n    async removeReservationToGroup(groupId: GroupId): Promise<GroupMessageResponse> {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'DELETE',\r\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\r\n        };\r\n        return defaultFetcher<undefined, GroupMessageResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 그룹 삭제\r\n     * @param groupId\r\n     */\r\n    async removeGroup(groupId: GroupId) {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'DELETE',\r\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}`\r\n        };\r\n        return defaultFetcher<undefined, GroupMessageResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 메시지 목록 조회\r\n     * @param data 목록 조회 상세조건 파라미터\r\n     */\r\n    async getMessages(data?: Readonly<GetMessagesRequestType>): Promise<GetMessagesResponse> {\r\n        const parameter: GetMessagesRequest | object = data ? new GetMessagesRequest(data) : {};\r\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/list`, parameter);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'GET',\r\n            url: endpoint\r\n        };\r\n        return defaultFetcher<undefined, GetMessagesResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 통계 조회\r\n     * @param data 통계 상세 조건 파라미터\r\n     * @returns GetStatisticsResponse 통계 결과\r\n     */\r\n    async getStatistics(data?: Readonly<GetStatisticsRequestType>): Promise<GetStatisticsResponse> {\r\n        const parameter: GetStatisticsRequest | object = data ? new GetStatisticsRequest(data) : {};\r\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/statistics`, parameter);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'GET',\r\n            url: endpoint\r\n        };\r\n        return defaultFetcher<undefined, GetStatisticsResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 잔액조회\r\n     * @returns GetBalanceResponse\r\n     */\r\n    async getBalance(): Promise<GetBalanceResponse> {\r\n        const requestConfig: RequestConfig = {\r\n            method: 'GET',\r\n            url: `${this.baseUrl}/cash/v1/balance`\r\n        };\r\n        return defaultFetcher<undefined, GetBalanceResponse>(this.authInfo, requestConfig);\r\n    }\r\n\r\n    /**\r\n     * 파일(이미지) 업로드\r\n     * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음\r\n     * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL\r\n     * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS\r\n     * @param name 파일 이름\r\n     * @param link 파일 링크, 친구톡의 경우 필수 값\r\n     */\r\n    async uploadFile(filePath: string, fileType: FileType, name?: string, link?: string): Promise<FileUploadResponse> {\r\n        const encodedFile = await ImageToBase64(filePath);\r\n        const requestConfig: RequestConfig = {\r\n            method: 'POST',\r\n            url: `${this.baseUrl}/storage/v1/files`\r\n        };\r\n        const parameter: FileUploadRequest = {\r\n            file: encodedFile,\r\n            type: fileType,\r\n            name,\r\n            link\r\n        };\r\n        return defaultFetcher<FileUploadRequest, FileUploadResponse>(this.authInfo, requestConfig, parameter);\r\n    }\r\n}\r\n","import Message, {MessageType} from '../models/message';\r\nimport * as Config from '../env_config.json';\r\nimport {GroupId} from '../types/commonTypes';\r\nimport {formatISO} from 'date-fns';\r\nimport stringDateTransfer from '../lib/stringDateTrasnfer';\r\n\r\nexport type DefaultAgentType = {\r\n    sdkVersion: string\r\n    osPlatform: string\r\n};\r\n\r\nexport const defaultAgent: DefaultAgentType = {\r\n    sdkVersion: Config.version,\r\n    osPlatform: `${process.platform} | ${process.version}`,\r\n};\r\n\r\nabstract class DefaultMessageRequest {\r\n    allowDuplicates: boolean;\r\n    appId: string | undefined;\r\n    protected agent: DefaultAgentType;\r\n\r\n    protected constructor() {\r\n        this.agent = defaultAgent;\r\n        this.allowDuplicates = false;\r\n    }\r\n}\r\n\r\nexport class SingleMessageSendingRequest extends DefaultMessageRequest {\r\n    message: Message;\r\n\r\n    constructor(message: Message, allowDuplicates?: boolean, appId?: string) {\r\n        super();\r\n        this.message = message;\r\n        if (typeof allowDuplicates === 'boolean') {\r\n            this.allowDuplicates = allowDuplicates;\r\n        }\r\n        if (appId) {\r\n            this.appId = appId;\r\n        }\r\n    }\r\n}\r\n\r\nexport class MultipleMessageSendingRequest extends DefaultMessageRequest {\r\n    messages: Array<Message>;\r\n\r\n    constructor(messages: Array<Message>, allowDuplicates?: boolean, appId?: string) {\r\n        super();\r\n        this.messages = messages;\r\n        if (typeof allowDuplicates === 'boolean') {\r\n            this.allowDuplicates = allowDuplicates;\r\n        }\r\n        if (appId) {\r\n            this.appId = appId;\r\n        }\r\n    }\r\n}\r\n\r\nexport class GroupMessageAddRequest {\r\n    messages: Array<Message>;\r\n\r\n    constructor(messages: Array<Message>) {\r\n        this.messages = messages;\r\n    }\r\n}\r\n\r\nexport type ScheduledDateSendingRequest = {\r\n    scheduledDate: string\r\n}\r\n\r\nexport type RemoveMessageIdsToGroupRequest = {\r\n    messageIds: Array<string>\r\n}\r\n\r\nexport type GetGroupMessagesRequest = {\r\n    startKey?: string,\r\n    limit?: number\r\n}\r\n\r\nexport type GetGroupsRequest = {\r\n    startKey?: string,\r\n    limit?: number,\r\n    startDate?: string,\r\n    endDate?: string\r\n}\r\n\r\nexport type RequestConfig = {\r\n    method: string,\r\n    url: string\r\n}\r\n\r\ntype DateType = 'CREATED' | 'UPDATED'\r\n\r\nexport type GetMessagesRequestType = {\r\n    startKey?: string\r\n    limit?: number\r\n    messageId?: string\r\n    messageIds?: Array<string>\r\n    groupId?: GroupId\r\n    to?: string\r\n    from?: string\r\n    type?: MessageType\r\n    statusCode?: string\r\n    duration?: {\r\n        dateType?: DateType\r\n        startDate: string\r\n        endDate: string\r\n    }\r\n}\r\n\r\nexport class GetMessagesRequest {\r\n    readonly startKey?: string;\r\n    readonly limit?: number;\r\n    readonly dateType?: DateType = 'CREATED';\r\n    readonly messageId?: string;\r\n    readonly messageIds?: Array<string>;\r\n    readonly groupId?: GroupId;\r\n    readonly to?: string;\r\n    readonly from?: string;\r\n    readonly type?: MessageType;\r\n    readonly statusCode?: string;\r\n    readonly startDate?: string;\r\n    readonly endDate?: string;\r\n\r\n    constructor(getMessageRequestType: GetMessagesRequestType) {\r\n        this.startKey = getMessageRequestType.startKey;\r\n        this.limit = getMessageRequestType.limit;\r\n        if (getMessageRequestType.duration?.dateType) this.dateType = getMessageRequestType.duration.dateType;\r\n        if (getMessageRequestType.duration) this.startDate = formatISO(stringDateTransfer(getMessageRequestType.duration.startDate));\r\n        if (getMessageRequestType.duration) this.endDate = formatISO(stringDateTransfer(getMessageRequestType.duration.endDate));\r\n        this.messageId = getMessageRequestType.messageId;\r\n        this.messageIds = getMessageRequestType.messageIds;\r\n        this.groupId = getMessageRequestType.groupId;\r\n        this.to = getMessageRequestType.to;\r\n        this.from = getMessageRequestType.from;\r\n        this.type = getMessageRequestType.type;\r\n        this.statusCode = getMessageRequestType.statusCode;\r\n    }\r\n}\r\n\r\nexport type GetStatisticsRequestType = {\r\n    duration?: {\r\n        startDate: string | Date\r\n        endDate: string | Date\r\n    }\r\n    masterAccountId: string\r\n}\r\n\r\nexport class GetStatisticsRequest {\r\n    readonly startDate: string;\r\n    readonly endDate: string;\r\n    readonly masterAccountId: string;\r\n\r\n    constructor(getStatisticsRequest: GetStatisticsRequestType) {\r\n        if (getStatisticsRequest.duration) this.startDate = formatISO(stringDateTransfer(getStatisticsRequest.duration.startDate));\r\n        if (getStatisticsRequest.duration) this.endDate = formatISO(stringDateTransfer(getStatisticsRequest.duration.endDate));\r\n        this.masterAccountId = getStatisticsRequest.masterAccountId;\r\n    }\r\n}\r\n\r\nexport type FileType = 'KAKAO' | 'MMS' | 'DOCUMENT' | 'RCS'\r\n\r\nexport type FileUploadRequest = {\r\n    file: string\r\n    type: FileType\r\n    name?: string\r\n    link?: string\r\n}\r\n\r\nexport type CreateGroupRequest = DefaultAgentType & {\r\n    allowDuplicates: boolean\r\n    appId?: string\r\n}\r\n","{\r\n  \"version\": \"nodejs/2.0.0\"\r\n}\r\n","import {parseISO} from 'date-fns';\r\nimport {InvalidDateError} from '../errors/DefaultError';\r\n\r\n/**\r\n * 일반 문자열 날짜가 있을 경우 Date 타입으로 변환해주는 함수\r\n * @param value 일반 문자열 날짜 또는 Date 타입의 날짜\r\n */\r\nexport default function stringDateTransfer(value: string | Date): Date {\r\n    if (typeof value === 'string') {\r\n        value = parseISO(value);\r\n        const invalidDateText = 'Invalid Date';\r\n        if (value.toString() === invalidDateText) {\r\n            throw new InvalidDateError(invalidDateText);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n","export type ErrorResponse = {\r\n    errorCode: string,\r\n    errorMessage: string\r\n}\r\n\r\nexport class InvalidDateError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'InvalidDateError';\r\n    }\r\n}\r\n\r\nexport class ApiKeyError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'InvalidApiKeyError';\r\n    }\r\n}\r\n\r\nexport class DefaultError extends Error {\r\n    constructor(errorCode: string, errorMessage: string) {\r\n        super(errorMessage);\r\n        this.name = errorCode;\r\n    }\r\n}\r\n","import getAuthInfo, {AuthenticationParameter} from './authenticator';\r\nimport fetch from 'cross-fetch';\r\nimport {DefaultError, ErrorResponse} from '../errors/DefaultError';\r\n\r\ntype DefaultRequest = {\r\n    url: string,\r\n    method: string\r\n}\r\n\r\n/**\r\n * 공용 API 클라이언트 함수\r\n * @throws DefaultError 발송 실패 등 API 상의 다양한 오류를 표시합니다.\r\n * @param authParameter API 인증을 위한 파라미터\r\n * @param request API URI, HTTP method 정의\r\n * @param data API에 요청할 request body 데이터\r\n */\r\nexport default async function defaultFetcher<T, R>(authParameter: AuthenticationParameter, request: DefaultRequest, data?: T): Promise<R> {\r\n    const authorizationHeaderData = getAuthInfo(authParameter);\r\n    return await fetch(request.url, {\r\n        headers: {\r\n            'Authorization': authorizationHeaderData,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n        method: request.method\r\n    }).then<R>(async (res) => {\r\n        if (res.status >= 400 && res.status < 500) {\r\n            const errorResponse: ErrorResponse = await res.json();\r\n            throw new DefaultError(errorResponse.errorCode, errorResponse.errorMessage);\r\n        } else if (res.status >= 500) {\r\n            const responseText = await res.text();\r\n            throw new DefaultError('UnknownException', responseText);\r\n        }\r\n        try {\r\n            return res.json();\r\n        } catch (exception) {\r\n            throw new Error(await res.text());\r\n        }\r\n    });\r\n}\r\n","import {customAlphabet} from 'nanoid';\r\nimport {formatISO} from 'date-fns';\r\nimport {HmacSHA256} from 'crypto-js';\r\nimport {ApiKeyError} from '../errors/DefaultError';\r\n\r\nenum AuthenticateType {\r\n    API_KEY\r\n}\r\n\r\nexport type AuthenticationParameter = {\r\n    apiKey?: string\r\n    apiSecret?: string\r\n}\r\n\r\n\r\n/**\r\n * Get Authenticate Information for CoolSMS Requests\r\n * @param authenticationParameter\r\n * @param authType\r\n * @return string \"Authorization value\r\n */\r\nexport default function getAuthInfo(authenticationParameter: AuthenticationParameter, authType: AuthenticateType = AuthenticateType.API_KEY): string {\r\n    const {apiKey, apiSecret} = authenticationParameter;\r\n    switch (authType) {\r\n        case AuthenticateType.API_KEY:\r\n        default:\r\n            const salt = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 32)();\r\n            const date = formatISO(new Date());\r\n            const hmacData = date + salt;\r\n            if ((!apiKey || !apiSecret) || (apiKey === '' || apiSecret === '')) {\r\n                throw new ApiKeyError('Invalid API Key Error');\r\n            }\r\n            const signature = HmacSHA256(hmacData, apiSecret).toString();\r\n            return `HMAC-SHA256 apiKey=${apiKey}, date=${date}, salt=${salt}, signature=${signature}`;\r\n    }\r\n}\r\n","import {URL, URLSearchParams} from 'url';\r\n\r\nexport default function queryParameterGenerator<T extends object>(url: string, data?: T): string {\r\n    const apiUrl = new URL(url);\r\n    if (data) {\r\n        const urlSearchParams = new URLSearchParams();\r\n        Object.keys(data).forEach(key => {\r\n            const reflectedValue = Reflect.get(data, key);\r\n            if (reflectedValue) {\r\n                urlSearchParams.append(key, reflectedValue);\r\n            }\r\n        });\r\n        apiUrl.search = urlSearchParams.toString();\r\n    }\r\n    return apiUrl.toString();\r\n}\r\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}